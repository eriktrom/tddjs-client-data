// Generated by CoffeeScript 1.6.1

(function() {
  var ajax, matchers;
  matchers = tddjs.namespace("util").matchers;
  ajax = tddjs.ajax;
  (function() {
    module("Get Request", {
      setup: function() {
        this.ajaxCreate = ajax.create;
        this.xhrDbl = Object.create(XMLHttpRequestDbl);
        return ajax.create = stubFn(this.xhrDbl);
      },
      teardown: function() {
        return ajax.create = this.ajaxCreate;
      }
    });
    test("@xhrDbl is a function", function() {
      return ok(matchers.okFunction(ajax.create));
    });
    test("it should define get method", function() {
      ok(matchers.okFunction(ajax.get));
      return ok(typeof ajax.get === "function");
    });
    test("it should throw error without url", function() {
      return throws(function() {
        return ajax.get();
      }, TypeError);
    });
    test("it should obtain an XMLHttpRequest object", function() {
      ajax.get("/url");
      return ok(ajax.create.called);
    });
    test("it should call open with method, url, async flag", function() {
      ajax.get("/url");
      return deepEqual(this.xhrDbl.open.args, ["GET", "/url", true]);
    });
    test("it should add onreadystatechange handler", function() {
      ajax.get("/url");
      return ok(typeof this.xhrDbl.onreadystatechange === "function");
    });
    return test("it should call send", function() {
      ajax.get("/url");
      return ok(this.xhrDbl.send.called);
    });
  })();
  return (function() {
    module("Ready State Handler", {
      setup: function() {
        this.ajaxCreate = ajax.create;
        this.xhrDbl = Object.create(XMLHttpRequestDbl);
        return ajax.create = stubFn(this.xhrDbl);
      },
      teardown: function() {
        return ajax.create = this.ajaxCreate;
      }
    });
    test("it should call success handler for status 200", 1, function() {
      var success;
      this.xhrDbl.readyState = 4;
      this.xhrDbl.status = 200;
      success = stubFn();
      ajax.get("/url", {
        success: success
      });
      this.xhrDbl.onreadystatechange();
      return ok(success.called);
    });
    return test("it should not throw error without success handler", function() {
      var _this = this;
      this.xhrDbl.readyState = 4;
      this.xhrDbl.status = 200;
      ajax.get("/url");
      
      (function () {
        this.xhrDbl.onreadystatechange();
      }.bind(this))();
      ;
      (function() {
        return _this.xhrDbl.onreadystatechange();
      })();
      (function() {
        return this.xhrDbl.onreadystatechange();
      }).bind(this)();
      ok(true);
      return expect(1);
    });
  })();
})();
