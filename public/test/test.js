// Generated by CoffeeScript 1.6.1

module("Observable", {
  setup: function() {
    return this.observable = new tddjs.util.Observable();
  }
});

test("it adds observers", function() {
  var observers;
  observers = [(function() {}), (function() {})];
  this.observable.addObserver(observers[0]);
  this.observable.addObserver(observers[1]);
  deepEqual(this.observable.observers, observers);
  ok(this.observable.hasObserver(observers[0]));
  return ok(this.observable.hasObserver(observers[1]));
});

test("it returns true when it has observer(s)", function() {
  var observer;
  observer = function() {};
  this.observable.addObserver(observer);
  return ok(this.observable.hasObserver(observer));
});

test("it returns false when it has no observer(s)", function() {
  return ok(!(this.observable.hasObserver(function() {})));
});

test("it calls all observers", function() {
  var observer1, observer2;
  observer1 = function() {
    return observer1.called = true;
  };
  observer2 = function() {
    return observer2.called = true;
  };
  this.observable.addObserver(observer1);
  this.observable.addObserver(observer2);
  this.observable.notifyObservers();
  ok(observer1.called);
  return ok(observer2.called);
});

test("it should pass through arguments", function() {
  var actual;
  actual = null;
  this.observable.addObserver(function() {
    return actual = arguments;
  });
  this.observable.notifyObservers("String", 1, 32);
  return deepEqual(Array.prototype.slice.call(actual, 0), ["String", 1, 32]);
});

test("it should throw for uncallable observer", function() {
  return throws(function() {
    return this.observable.addObserver({});
  }, TypeError);
});

test("it should notify all even when some fail", function() {
  var observer1, observer2;
  observer1 = function() {
    throw new Error("Oops");
  };
  observer2 = function() {
    return observer2.called = true;
  };
  this.observable.addObserver(observer1);
  this.observable.addObserver(observer2);
  this.observable.notifyObservers();
  return ok(observer2.called);
});
